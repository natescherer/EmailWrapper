#          YAML Reference Guide: https://www.appveyor.com/docs/appveyor-yml/
# Environmental Variables Guide: https://www.appveyor.com/docs/environment-variables/
#                YAML Validator: https://ci.appveyor.com/tools/validate-yaml

environment:
  NuGetApiKey:
    secure: pzzBHe3dds15o5jYQLKlsuxO3JbV9rkccb1PwKigFP2vfp9vC579E8KSGhR1GQAA
  GitHubKey:
    secure: mhTvr/vsjuMnWB6+KlvCZ7fDxj7riYN6PdXZFGlogv9OL0G2M3K/7OjxiggarWvi
  AppveyorNuGetApiKey:
    secure: 5LnSnOCfovk/pF6NpAjXmmwBcnQqrAShdFC9hmgLpdQ=
  AppveyorNuGetFeed: "https://ci.appveyor.com/nuget/natescherer-hvliadegj7t9/"
  AppveyorNuGetUser:
    secure: FLkSk7shZMw3/QgA8mwIc19JTHh1/nE2miHSu1SUjf0=
  AppveyorNuGetPassword:
    secure: LtIrdWAaydci9/eHeeUI1A==
  GitName: "Nate Scherer"
  GitEmail: "376408+natescherer@users.noreply.github.com"
  PowerShellModules: "PowerShellGet,PackageManagement,ChangelogManagement,InvokeBuild,Pester,platyPS,MarkdownToHtml,BuildHelpers"

stack: go 1.11

image:
  - Visual Studio 2017
  - Ubuntu1804

build: off

skip_tags: true

skip_commits:
  files:
    - README.md
  message: /updated readme.*|update docs.*|Release via Appveyor.*/

init:
  - ps: if ($env:APPVEYOR_REPO_COMMIT_MESSAGE -like "!Deploy*") {$ReleaseVersion = $env:APPVEYOR_REPO_COMMIT_MESSAGE.split(" ")[1]} else {$ReleaseVersion = "vNext"}
  - ps: Update-AppveyorBuild -Version "$ReleaseVersion+$($env:APPVEYOR_BUILD_NUMBER)"
  - ps: if ($ReleaseVersion -ne "vNext") {$env:GitHubTag = "v$ReleaseVersion"}
  - ps: if ($ReleaseVersion -ne "vNext") {$env:DeployMode = "true"}
  - ps: git config --global user.name $($env:GitName)
  - ps: git config --global user.email $($env:GitEmail)
  - ps: git config --global core.autocrlf true
  - ps: $ErrorActionPreference = "Stop"
  - pwsh: $ErrorActionPreference = "Stop"

for:
  -
    matrix:
      only:
        - image: Visual Studio 2017
    environment:
      GOPATH: c:\gopath
    install:
      - ps: Write-Host "Visual Studio 2017" -ForegroundColor Yellow
      - ps: Write-Host "Installing Windows PowerShell Modules..."
      - ps: Install-PackageProvider -Name NuGet -Force | Out-Null
      - ps: foreach ($Module in ($env:PowerShellModules -split ",")) { Install-Module -Name $Module -Force -SkipPublisherCheck -AllowClobber }
      - pwsh: Write-Host "Installing PowerShell Core Modules..."
      - pwsh: foreach ($Module in ($env:PowerShellModules -split ",")) { Install-Module -Name $Module -Force -SkipPublisherCheck -AllowClobber }
      - ps: Write-Host "Installing MailHog..."
      - ps: go get github.com/mailhog/MailHog
    build_script:
      - ps: Write-Host "Starting Build..."
      - ps: if ($ReleaseVersion -ne "vNext") {Invoke-Build -ReleaseVersion $ReleaseVersion -BuildMode "Release" -LinkBase "https://github.com/$($env:APPVEYOR_REPO_NAME)"} else {Invoke-Build -BuildMode "Snapshot"}
    after_build:
      - ps: $env:ChangelogData = ((((Get-ChangelogData).Released[0].RawData -replace "## \[.*","") -replace "###","").Trim()) -replace [System.Environment]::NewLine,"\n"
      - ps: Write-Host "ChangelogData is '$env:ChangelogData'"
      - ps: Compress-Archive -Path * -DestinationPath state.zip
    test_script:
      - ps: Write-Host "Starting Tests on Windows Powershell..."
      - ps: $res = Invoke-Pester -Path ".\test" -OutputFormat NUnitXml -OutputFile TestsResults.xml -PassThru
      - ps: (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestsResults.xml))
      - ps: if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."}
      - ps: Write-Host "Starting Tests on PowerShell Core..."
      - pwsh: $res = Invoke-Pester -Path ".\test" -OutputFormat NUnitXml -OutputFile TestsResults.xml -PassThru
      - pwsh: (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestsResults.xml))
      - pwsh: if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."}
    artifacts:
      - path: out\*.zip
        name: ReleasePackage
      - path: state.zip
        name: BuildState
    before_deploy:
      - ps: Write-Host "Starting Pre-Deploy Config..."
      - ps: git config --global credential.helper store
      - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GitHubKey):x-oauth-basic@github.com`n"
      - ps: Write-Host "Starting code push back to GitHub..."
      - ps: Remove-Item .\state.zip
      - ps: Remove-Item .\TestsResults.xml
      - ps: $env:Path += ";$env:ProgramFiles\Git\cmd"
      - ps: git checkout master --quiet
      - ps: git add --all
      - ps: git status
      - ps: git commit -s -m "Release via Appveyor - $ReleaseVersion"
      - ps: git tag -a v$($ReleaseVersion) -m v$($ReleaseVersion)
      - ps: git push origin master --porcelain
      - ps: Write-Host "$($env:APPVEYOR_PROJECT_NAME) PowerShell Module version $ReleaseVersion code pushed back to GitHub." -ForegroundColor Cyan
    deploy:
      tag: $(GitHubTag)
      description: $(ChangelogData)
      provider: GitHub
      auth_token: $(GitHubKey)
      artifact: ReleasePackage
      draft: false
      prerelease: false
      on:
        branch: master
        DeployMode: true
    on_success:
      - ps: . .\appveyornuget.ps1

  -
    matrix:
      only:
        - image: Ubuntu1804
    environment:
      GOPATH: /usr/go/
    install:
      - pwsh: Write-Host Ubuntu -ForegroundColor Yellow
      - pwsh: Write-Host "Installing PowerShell Core Modules..."
      - pwsh: foreach ($Module in ($env:PowerShellModules -split ",")) { Install-Module -Name $Module -Force -SkipPublisherCheck -AllowClobber -Scope "CurrentUser" }
      - pwsh: Write-Host "Installing MailHog..."
      - sh: go get github.com/mailhog/MailHog
    build_script:
      - pwsh: Write-Host "Starting Build..."
      - pwsh: if ($ReleaseVersion -ne "vNext") {Invoke-Build -ReleaseVersion $ReleaseVersion -BuildMode "Release" -LinkBase "https://github.com/$($env:APPVEYOR_REPO_NAME)"} else {Invoke-Build -BuildMode "Snapshot"}
    after_build:
      - ps: Compress-Archive -Path * -DestinationPath state.zip
    test_script:
      - pwsh: Write-Host "Starting Tests on Powershell Core..."
      - pwsh: $res = Invoke-Pester -Path ".\test" -OutputFormat NUnitXml -OutputFile TestsResults.xml -PassThru
      - pwsh: (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestsResults.xml))
      - pwsh: if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."}
    artifacts:
      - path: out\*.zip
        name: ReleasePackage
      - path: state.zip
        name: BuildState