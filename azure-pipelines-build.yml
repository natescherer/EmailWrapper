parameters:
  name: ''
  vmImage: ''
  moduleInstallOptions: ''
  pwsh: true
  tempDir: ''

jobs:
- job: ${{ parameters.name }}
  pool: 
    vmImage: ${{ parameters.vmImage }}
  steps:

  - task: GoTool@0
    inputs:
      version: '1.10'
      goPath: '$(Agent.ToolsDirectory)/gopath'

  - task: Go@0
    inputs:
      command: 'get'
      arguments: 'github.com/mailhog/MailHog'

  - powershell: |
      Start-Process -FilePath "$env:GOPATH\bin\MailHog" -ArgumentList "-smtp-bind-addr", "0.0.0.0:25", "-api-bind-addr", "0.0.0.0:8025", "-ui-bind-addr", "0.0.0.0:8025"
      Start-Process -FilePath "$env:GOPATH\bin\MailHog" -ArgumentList "-smtp-bind-addr", "0.0.0.0:1025", "-api-bind-addr", "0.0.0.0:9025", "-ui-bind-addr", "0.0.0.0:9025"
      Start-Process -FilePath "$env:GOPATH\bin\MailHog" -ArgumentList "-smtp-bind-addr", "0.0.0.0:2025", "-api-bind-addr", "0.0.0.0:10025", "-ui-bind-addr", "0.0.0.0:10025", "-auth-file", "$env:SYSTEM_DEFAULTWORKINGDIRECTORY\test\mhcreds.txt"
    displayName: Start MailHog (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - bash: |
      sudo nohup $GOPATH/bin/MailHog -smtp-bind-addr 0.0.0.0:25 -api-bind-addr 0.0.0.0:8025 -ui-bind-addr 0.0.0.0:8025 &>/dev/null &
      sudo nohup $GOPATH/bin/MailHog -smtp-bind-addr 0.0.0.0:1025 -api-bind-addr 0.0.0.0:9025 -ui-bind-addr 0.0.0.0:9025 &>/dev/null &
      sudo nohup $GOPATH/bin/MailHog -smtp-bind-addr 0.0.0.0:2025 -api-bind-addr 0.0.0.0:10025 -ui-bind-addr 0.0.0.0:10025 -auth-file $SYSTEM_DEFAULTWORKINGDIRECTORY/test/mhcreds.txt &>/dev/null &
    condition: or(eq( variables['Agent.OS'], 'Darwin' ), eq( variables['Agent.OS'], 'Linux' ))
    displayName: Start MailHog (macOS/Linux)

  - task: PowerShell@2
    displayName: Environment Details
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $PSVersionTable
        Write-Host "tempDir = ${{ parameters.tempDir }}"
        Write-Host "Build.Repository.Uri = $env:BUILD_REPOSITORY_URI"
        Write-Host "Build.QueuedBy = $env:BUILD_QUEUEDBY"
        Write-Host "Build.SourceVersionMessage = $env:BUILD_SOURCEVERSIONMESSAGE"
        Write-Host "Build.Repository.Name = $env:BUILD_REPOSITORY_NAME"
        Write-Host "Build.BuildNumber = $env:BUILD_BUILDNUMBER"
        Write-Host "Current Location = $(Get-Location)"

  - task: PowerShell@2
    displayName: Install-Module
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: Install-Module -Name $env:POWERSHELLMODULES.split(",") -Force -SkipPublisherCheck -AllowClobber ${{ parameters.moduleInstallOptions }}

  - task: PowerShell@2
    displayName: Set Variables
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $ProjectName = Get-ProjectName
        Write-Host "##vso[task.setvariable variable=projectName]$ProjectName"
        Write-Host "##vso[task.setvariable variable=psEdition]$PSEdition"

  - task: PowerShell@2
    displayName: Invoke-Build
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $Uri = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECT/_apis/build/builds/$env:BUILD_BUILDID/tags/ReleaseToProd?api-version=5.0"
        Write-Host $Uri
        if ($env:BUILD_SOURCEVERSIONMESSAGE -like "!ReleaseToProd*") {
          $ReleaseVersion = $env:BUILD_SOURCEVERSIONMESSAGE.split(" ")[1]
          $TagSplat = @{
            Uri = $Uri
            Headers = @{
              Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
            }
            Method = "Put"
          }
          Invoke-RestMethod @TagSplat
        }
        if ($env:BUILD_SOURCEVERSIONMESSAGE -notlike "!ReleaseToProd*") {
          $ManifestVersion = (Import-PowerShellDataFile .\src\*.psd1).ModuleVersion
          if ((Get-ChangelogData).Released -ne $null) { $AlphaVersionBase = Step-Version $ManifestVersion }
          if ((Get-ChangelogData).Released -eq $null) { $AlphaVersionBase = $ManifestVersion }
          $ReleaseVersion = $AlphaVersionBase + "-alpha" + ([int]$env:BUILD_BUILDNUMBER).ToString("0000")
          Write-Host "`$ReleaseVersion is $ReleaseVersion"
          Write-Host "##vso[task.setvariable variable=releaseVersion]$ReleaseVersion"
        }
        $BuildSplat = @{
          Version = $ReleaseVersion
          LinkPattern = Invoke-Expression $env:LINKPATTERN
          LicenseUri = "https://github.com/$env:BUILD_REPOSITORY_NAME/blob/master/LICENSE"
          ProjectUri = "https://github.com/$env:BUILD_REPOSITORY_NAME"
          HelpInfoUri = "https://github.com/$env:BUILD_REPOSITORY_NAME"
        }
        Invoke-Build @BuildSplat

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: 'Build-$(Agent.OS)_$(psEdition)'
      pathToPublish: '$(Build.Repository.LocalPath)'

  - task: PowerShell@2
    displayName: Invoke-Pester
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        Import-Module Pester
        $Configuration = [PesterConfiguration]::Default
        $Configuration.Run.Path = ".\test"
        $Configuration.Run.Exit = $true
        $Configuration.CodeCoverage.Enabled = $true
        $Configuration.CodeCoverage.Path = $env:MODULENAME
        $Configuration.TestResult.Enabled = $true

        Invoke-Pester -Configuration $Configuration
        Get-ChildItem

  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: always()
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/testResults.xml'
      testRunTitle: 'TestResults-$(Agent.OS)_$(psEdition)'

  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Results
    condition: always()
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '**/coverage.xml'
      failIfCoverageEmpty: true